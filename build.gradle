plugins {
//    id 'net.ltgt.apt' version "0.21"
    id 'maven-publish'
    id 'signing'
    id 'application'
    id 'java'
    id 'maven'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
//    id 'com.github.spotbugs' version '1.6.3'
    id 'org.jetbrains.kotlin.jvm' version '1.3.10'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.10'
    id 'org.jetbrains.dokka' version '0.9.17'
}

description = "Java Framework for building clustered RESTful web applications"
group = "com.openlattice"

ext.projectName = "rhizome"
ext.scmUrl = 'scm:git:https://github.com/geekbeast/rhizome.git'
ext.connectionUrl = 'scm:git:https://github.com/geekbeast/rhizome.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/geekbeast/rhizome.git'

apply from: "https://raw.githubusercontent.com/openlattice/gradles/master/openlattice.gradle"
apply plugin: 'kotlin'
apply from: "https://raw.githubusercontent.com/openlattice/gradles/master/repos.gradle"\

mainClassName = "com.kryptnostic.rhizome.core.RhizomeAws"
/*
spotbugs {
    toolVersion = '3.1.5'
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
*/

run {
    if (System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

ext.sourceCompatibility = JavaVersion.VERSION_11
ext.targetCompatibility = JavaVersion.VERSION_11

tasks.withType(Javadoc) {
    enabled = false
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}


jacoco {
    toolVersion = "${project.jacoco_tool_version}"
}


dependencies {
    //spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
    //compileOnly 'net.jcip:jcip-annotations:1.0'
    //compileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.3'
    //testCompileOnly 'net.jcip:jcip-annotations:1.0'
    //testCompileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.3'
    /*
     * AWS
     */
    compile group: 'com.amazonaws', name: 'aws-java-sdk-ec2', version: '1.11.319'
    compile 'com.amazonaws:aws-java-sdk-s3:1.11.319'

    /*
     * Immutables library for immutable objects
     */
    annotationProcessor "org.immutables:value:${immutables_version}"

    /*
     * Servlet API 3.1
     * 100% Java Servlet Container and Servlet Configuration
     */
    compile "javax.servlet.jsp:javax.servlet.jsp-api:${javax_servlet_version}"
    compile "javax.servlet:javax.servlet-api:${javax_servlet_api_version}"
    compile group: 'javax.servlet', name: 'jstl', version: '1.2'

    /*
     * SL4J + LOG4J2
     */
    compile group: "org.slf4j", name: "slf4j-api", version: "${slf4j_version}"

    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: "${log4j_version}"
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4j_version}"
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4j_version}"
    compile group: 'org.apache.logging.log4j', name: 'log4j-web', version: "${log4j_version}"

    /*
     * CORE SPRING FRAMEWORK DEPENDENCIES
     * Depending injection, asynchronous execution, task scheduling, aspect oriented proxies, and more.
     */
    compile "org.springframework:spring-core:${project.spring_framework_version}"
    compile "org.springframework:spring-beans:${project.spring_framework_version}"
    compile "org.springframework:spring-context:${project.spring_framework_version}"
    compile "org.springframework:spring-aop:${project.spring_framework_version}"
    compile "org.springframework:spring-web:${project.spring_framework_version}"
    compile "org.springframework:spring-webmvc:${project.spring_framework_version}"
    compile "org.springframework:spring-test:${project.spring_framework_version}"
    //compile "org.springframework:spring-jdbc:${project.spring_framework_version}"
    /*
     * SPRING SECURITY DEPENDENCIES
     * Solid and battle tested security AuthN/AuthZ framwork
     */
    compile "org.springframework.security:spring-security-core:${project.spring_security_version}"
    compile "org.springframework.security:spring-security-web:${project.spring_security_version}"
    compile "org.springframework.security:spring-security-ldap:${project.spring_security_version}"
    compile "org.springframework.security:spring-security-config:${project.spring_security_version}"
    compile "org.springframework.security:spring-security-messaging:${project.spring_security_version}"

    //JDBI
    compile 'org.jdbi:jdbi3-core:3.1.0'
    compile 'org.jdbi:jdbi3-sqlobject:3.1.0'
    compile 'org.jdbi:jdbi3-postgres:3.1.0'

    compile("com.auth0:auth0-spring-security-api:${project.auth0_spring_version}") {
        exclude group: "org.springframework.boot"
    }

    /*
     * Metrics
     * Awesome reporting-- defaults to Graphite
     */
    compile "io.dropwizard.metrics:metrics-core:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-servlets:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-graphite:${dropwizard_metrics_version}"
    compile "com.ryantenney.metrics:metrics-spring:${ryantenney_metrics_version}"

    /*
     * Prometheus - https://prometheus.io/docs
     */
    compile "io.prometheus:simpleclient:${prometheus_jvm_client_version}"
    compile "io.prometheus:simpleclient_dropwizard:${prometheus_jvm_client_version}"
    compile "io.prometheus:simpleclient_servlet:${prometheus_jvm_client_version}"

    /*
     * GUAVA
     * EventBus, FluentIterables, ListenableFutures and more
     */
    compile "com.google.guava:guava:${guava_version}"

    /*
     JODA TIME - A better datetime class.
     */
    compile "joda-time:joda-time:2.9.1"

    /*
     * APACHE COMMONS
     * Logging, StringUtils, RandomStringUtils, IOUtils, and more
     */
    compile "org.apache.commons:commons-collections4:4.1"
    compile "commons-io:commons-io:2.4"
    compile "org.apache.commons:commons-lang3:3.4"
    compile "commons-codec:commons-codec:1.9"

    /*
     * JACKSON SERIALIZATION
     * YAML via SnakeYaml
     * Afterburner for faster serialization
     * Guava integration
     * Smile for binary serialization
     * Jersey integration
     * Jaxb annotation support
     */
    compile "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jackson_version}"
    compile "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${jackson_version}"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:${jackson_version}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson_version}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson_version}"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jackson_version}"
    compile "com.fasterxml.jackson.module:jackson-module-kotlin:${jackson_version}"
    compile 'org.yaml:snakeyaml:${snakeyaml_version}'

    /*
     * @Inject and @Nullable support
     */
    compile "javax.inject:javax.inject:1"

    /*
     * Hibernate Validator
     */
    compile "org.hibernate:hibernate-validator:${hibernate_version}"
    compile "javax.el:javax.el-api:3.0.0"
    compile "org.glassfish:javax.el:3.0.0"

    /*
     * HAZELCAST - DISTRIBUTED DATA GRID
     * Transparent http clustering, distributed java.util collections
     */
    compile "com.hazelcast:hazelcast:${hazelcast_version}"
    compile "com.hazelcast:hazelcast-client:${hazelcast_version}"
    compile "com.hazelcast:hazelcast-wm:${hazelcast_wm_version}"
    compile "com.hazelcast:hazelcast-spring:${hazelcast_version}"

    /*
     * EMBEDDED JETTY FOR LOCAL TESTING
     * TODO: Add support for Tomcat
     * TODO: Integrate with application plugin for standalone deployment
     */
    compile "org.ow2.asm:asm:6.2"
    compile "org.eclipse.jetty.aggregate:jetty-all:${jetty_version}"
    //TODO: Once GA version of jetty-jsp is released update version.
    //compile "org.eclipse.jetty:jetty-jsp:9.3.0.M1"
    compile "org.eclipse.jetty:jetty-spring:${jetty_version}"
    compile "org.eclipse.jetty.websocket:websocket-server:${jetty_version}"
    compile "org.eclipse.jetty.websocket:javax-websocket-server-impl:${jetty_version}"
    compile "org.eclipse.jetty:jetty-continuation:${jetty_version}"

    compile "io.netty:netty-transport-native-epoll:${netty_epoll_version}:${netty_os_arch}"

    /*
     * JAVAMAIL
     * Java email client.
     */
    compile "org.jodd:jodd-mail:5.0.7"

    /**
     * Cassandra
     */
    compile group: 'com.datastax.cassandra', name: 'cassandra-driver-core', version: "${cassandra_driver_version}"
    compile group: 'com.datastax.cassandra', name: 'cassandra-driver-extras', version: "${cassandra_driver_version}"
    compile group: 'com.datastax.cassandra', name: 'cassandra-driver-mapping', version: "${cassandra_driver_version}"
    compile "org.xerial.snappy:snappy-java:${snappy_version}"
    compile "net.jpountz.lz4:lz4:${lz4_version}"
    /*
     * Postgres
     */

    compile 'com.zaxxer:HikariCP:2.7.1'
    compile 'org.postgresql:postgresql:42.2.4'

    compile 'com.google.code.findbugs:jsr305:3.0.2'
    compile 'javax.annotation:javax.annotation-api:1.3.2'
    compile 'javax.validation:validation-api:2.0.1.Final'

    compile fileTree(dir: "lib/", include: "*.jar")


    compile "com.squareup.retrofit2:retrofit:${retrofit2_version}"

    /*
     * WEBSOCKET DEPENDENCIES
     */
    compile "org.springframework:spring-websocket:${project.spring_framework_version}"
    compile "org.springframework:spring-messaging:${project.spring_framework_version}"
    compile "org.springframework.integration:spring-integration-websocket:4.3.1.RELEASE"

    /*
     * TESTING
     */
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-all:${mockito_version}"

    /*
     * TODO: The rest we depend on Loom API via Jar dependency is to avoid circular classpath problems in Eclipse.
     * Some day we'll either create a separate project or make a rhizome-client library based off retrofit
     * that loom-api and rhizome server tests can both depend on.
     */
    if (project.hasProperty('developmentMode') && project.developmentMode) {
        logger.quiet(project.name + " using project dependencies.")
        compile project(":rhizome-client")
        testCompile(project(path: ":rhizome-client", configuration: "tests"))
    } else {
        logger.quiet(project.name + " using jar dependencies.")
        compile "com.openlattice:rhizome-client:${rhizome_client_version}"
        testCompile "com.openlattice:rhizome-client:${rhizome_client_version}:tests"
    }

    compile "com.auth0:auth0:${project.auth0_version}"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true
    ext.sourceCompatibility = JavaVersion.VERSION_11
    ext.targetCompatibility = JavaVersion.VERSION_11
}

install {
    configuration = configurations.published
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
